---
title: "Furman ggplot2 Theme Demo"
subtitle: "Comprehensive Guide to themefurmanu Package"
format: 
  html:
    toc: true
    toc-depth: 3
    theme: cosmo
    code-fold: false
    fig-width: 8
    fig-height: 5.5
editor: visual
---

## Introduction

The `themefurmanu` package provides a comprehensive ggplot2 theme and color palette system designed for Furman University's visual identity. This demo showcases the **unified approach** that makes themefurmanu different from other color palette packages.

### Key Innovation: One Function, Multiple Behaviors

Instead of learning dozens of function names like `scale_color_viridis_d()`, `scale_color_brewer()`, `scale_fill_gradient2()`, etc., themefurmanu uses **just two main functions**:

-   `scale_color_furmanu(palette = "name", discrete = TRUE/FALSE, ...)`
-   `scale_fill_furmanu(palette = "name", discrete = TRUE/FALSE, ...)`

You control the behavior through **arguments** rather than function names. This is more intuitive and consistent.

```{r setup}
library(dplyr)
library(ggplot2)
library(themefurmanu)
# Font registration is automatic, but you can also do it explicitly:
# register_furmanu_fonts()
```

## Understanding the Palette System

### Available Palettes Overview

```{r palette-overview}
# View all palettes at once
show_furmanu_palettes()

# Get structured information
list_palettes()
```

### Palette Categories and When to Use Them

```{r palette-info}
# Get detailed info for each type
palette_info("main")           # Categorical
palette_info("sequential1")    # Sequential  
palette_info("divergent1")     # Divergent
```

## Theme Variants

```{r themes-demo}
# Standard theme
p_standard <- ggplot(mtcars, aes(wt, mpg)) +
  geom_point(color = "#582c83", size = 3) +
  labs(title = "Standard Theme", subtitle = "Default styling") +
  theme_furmanu()

# Presentation theme
p_presentation <- ggplot(mtcars, aes(wt, mpg)) +
  geom_point(color = "#582c83", size = 3) +
  labs(title = "Presentation Theme", subtitle = "Larger fonts for slides") +
  theme_furmanu_presentation()

# Minimal theme
p_minimal <- ggplot(mtcars, aes(wt, mpg)) +
  geom_point(color = "#582c83", size = 3) +
  labs(title = "Minimal Theme", subtitle = "Clean and understated") +
  theme_furmanu_minimal()

p_standard
p_presentation
p_minimal
```

## The Core Concept: One Function, Many Uses

The beauty of themefurmanu is its simplicity. Instead of memorizing different function names, you use the same function with different arguments:

### The Pattern:

``` r
scale_color_furmanu(palette = "palette_name", discrete = TRUE/FALSE, ...)
scale_fill_furmanu(palette = "palette_name", discrete = TRUE/FALSE, ...)
```

### Quick Decision Guide:

-   **Categorical data** (species, groups, factors) → `discrete = TRUE`
-   **Continuous data** (temperature, scores, measurements) → `discrete = FALSE`
-   **Divergent continuous** (deviations, differences) → `discrete = FALSE, midpoint = 0`

## Categorical Examples (discrete = TRUE)

### Example 1: Basic Categorical Colors

```{r categorical-basic}
# Simple categorical coloring
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_furmanu(palette = "main", discrete = TRUE) +
  theme_furmanu() +
  labs(
    title = "Iris Species Comparison",
    subtitle = "Each species gets a distinct color",
    x = "Sepal Length (cm)", y = "Sepal Width (cm)"
  )
```

### Example 2: Categorical Fill for Bar Charts

```{r categorical-bars}
# Bar chart with categorical fill
mtcars_summary <- mtcars %>%
  group_by(cyl) %>%
  summarise(avg_mpg = mean(mpg), .groups = 'drop')

ggplot(mtcars_summary, aes(x = factor(cyl), y = avg_mpg, fill = factor(cyl))) +
  geom_col(width = 0.7, alpha = 0.9) +
  scale_fill_furmanu(palette = "cool", discrete = TRUE) +
  theme_furmanu() +
  labs(
    title = "Average MPG by Cylinder Count",
    x = "Number of Cylinders", y = "Miles per Gallon",
    fill = "Cylinders"
  )
```

## Sequential Examples (discrete = FALSE)

Sequential palettes show progression from low to high values.

### Example 3: Sequential Continuous Colors

```{r sequential-continuous}
# Heatmap with sequential colors
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
  geom_tile() +
  scale_fill_furmanu(palette = "sequential1", discrete = FALSE) +
  theme_furmanu() +
  labs(
    title = "Old Faithful Eruption Patterns",
    subtitle = "Density increases from light to dark",
    x = "Waiting Time (min)", y = "Eruption Duration (min)",
    fill = "Density"
  )
```

### Example 4: Sequential with Points

```{r sequential-points}
# Scatter plot with sequential coloring
ggplot(mtcars, aes(x = wt, y = mpg, color = hp)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_furmanu(palette = "sequential2", discrete = FALSE) +
  theme_furmanu() +
  labs(
    title = "Car Performance Relationships",
    subtitle = "Color intensity shows horsepower",
    x = "Weight (1000 lbs)", y = "Miles per Gallon",
    color = "Horsepower"
  )
```

## Divergent Examples (discrete = FALSE, midpoint = 0)

Divergent palettes emphasize deviations from a center point.

### Example 5: Divergent with Midpoint

```{r divergent-midpoint}
# Create data that diverges from zero
mtcars_divergent <- mtcars %>%
  mutate(mpg_diff = mpg - mean(mpg))

ggplot(mtcars_divergent, aes(x = wt, y = hp, color = mpg_diff)) +
  geom_point(size = 4) +
  scale_color_furmanu(
    palette = "divergent1", 
    discrete = FALSE, 
    midpoint = 0  # This centers the scale at zero
  ) +
  theme_furmanu() +
  labs(
    title = "Car Performance vs Fuel Efficiency",
    subtitle = "Red = below average MPG, Purple = above average MPG",
    x = "Weight (1000 lbs)", y = "Horsepower",
    color = "MPG\nDifference"
  )
```

### Example 6: Divergent Fill (Heatmap Style)

```{r divergent-heatmap}
# Create correlation matrix for demonstration
cor_data <- mtcars %>%
  select(mpg, hp, wt, qsec) %>%
  cor() %>%
  as.data.frame() %>%
  tibble::rownames_to_column("var1") %>%
  tidyr::pivot_longer(-var1, names_to = "var2", values_to = "correlation")

ggplot(cor_data, aes(var1, var2, fill = correlation)) +
  geom_tile() +
  scale_fill_furmanu(
    palette = "divergent3", 
    discrete = FALSE, 
    midpoint = 0,
    limits = c(-1, 1)
  ) +
  theme_furmanu() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    title = "Variable Correlation Matrix",
    subtitle = "Red = negative correlation, Green = positive correlation",
    x = "", y = "", fill = "Correlation"
  )
```

## Advanced Features

### Accessibility Checking

Always check if your color choices are accessible:

```{r accessibility}
# Check contrast for readability
contrast_results <- check_contrast("main")
print(contrast_results)

# Find accessible combinations
accessible_combos <- accessible_combinations(standard = "AA")
head(accessible_combos)
```

### Palette Export for Other Applications

Export your palettes for use in other tools:

```{r export-demo}
# Export as CSS variables
css_export <- export_palette("cool", format = "css")
cat(css_export, sep = "\n")

# Export as JSON
json_export <- export_palette("divergent1", format = "json")
cat(json_export)
```

### Custom Color Extraction

Extract specific numbers of colors from any palette:

```{r color-extraction}
# Extract 8 colors from a 3-color palette (with interpolation)
colors_8 <- extract_colors("divergent1", n = 8)
print(colors_8)

# Visualize the extraction
barplot(rep(1, 8), col = colors_8, 
        main = "8 Colors Extracted from divergent1 Palette",
        axes = FALSE)
```

## Common Mistakes and How to Avoid Them

### Mistake 1: Wrong discrete setting

``` r
# ❌ WRONG: Using discrete=TRUE for continuous data
scale_color_furmanu(palette = "sequential1", discrete = TRUE)  # Creates only 2 colors

# ✅ CORRECT: Using discrete=FALSE for continuous data  
scale_color_furmanu(palette = "sequential1", discrete = FALSE) # Creates smooth gradient
```

### Mistake 2: Forgetting midpoint for divergent data

``` r
# ❌ WRONG: Divergent scale without midpoint
scale_color_furmanu(palette = "divergent1", discrete = FALSE)

# ✅ CORRECT: Divergent scale with midpoint
scale_color_furmanu(palette = "divergent1", discrete = FALSE, midpoint = 0)
```

### Mistake 3: Using wrong palette type

``` r
# ❌ WRONG: Sequential palette for categorical data
scale_color_furmanu(palette = "sequential1", discrete = TRUE)  # Only 2 categories

# ✅ CORRECT: Categorical palette for categorical data
scale_color_furmanu(palette = "main", discrete = TRUE)        # Up to 6 categories
```

## Quick Reference

### For Categorical Data:

-   **Few categories (≤3)**: `palette = "cool"`
-   **Many categories (≤6)**: `palette = "main"`
-   **Always use**: `discrete = TRUE`

### For Continuous Data:

-   **Sequential (low→high)**: `palette = "sequential1/2/3"`, `discrete = FALSE`
-   **Divergent (low←center→high)**: `palette = "divergent1/2/3"`, `discrete = FALSE, midpoint = 0`

### For Special Cases:

-   **Monochrome**: `palette = "gray"`
-   **Performance ratings**: `palette = "evaluate"` (red=poor, yellow=ok, green=good)

## Practice Exercises

Try these exercises to master the themefurmanu approach:

1.  **Create a bar chart** showing count of cars by transmission type, colored by transmission type
2.  **Make a heatmap** of the `mtcars` correlation matrix using a divergent palette
3.  **Build a scatter plot** with continuous color mapping for a sequential variable
4.  **Design a plot** using the presentation theme for a hypothetical conference talk

Remember: **One function, many possibilities!** 🎨